<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Thorne - PhD student in astrophysics.</title>
    <description>A blog keeping track of some of my work ...</description>
    <link>http://bthorne93.github.io//</link>
    <atom:link href="http://bthorne93.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 05 Aug 2017 13:30:03 +0900</pubDate>
    <lastBuildDate>Sat, 05 Aug 2017 13:30:03 +0900</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>&#39;classy&#39;, the Python wrapper to CLASS&#39;</title>
        <description>&lt;p&gt;I will be doing some work which will require computing a lot of CMB spectra (as I have in the past, but just used the command line version of CLASS).&lt;/p&gt; &lt;p&gt;There is a good example of how to use &lt;code&gt;classy&lt;/code&gt; &lt;a href=&quot;https://github.com/lesgourg/class_public/wiki/Python-wrapper&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I will follow this tutorial and add some steps to figure out what I need for calculating Fisher matrices.&lt;/p&gt; &lt;h2&gt;Basic usage&lt;/h2&gt; &lt;p&gt;The class wrapper works in the same way as the C code. One has two main methods: compute and cleanup. The C code main routine consists of two methods: &lt;code&gt;compute&lt;/code&gt; and &lt;code&gt;struct_cleanup&lt;/code&gt; doing all the memory allocation...</description>
        <pubDate>Fri, 04 Aug 2017 09:06:31 +0900</pubDate>
        <link>http://bthorne93.github.io//classy-wrapper/</link>
        <guid isPermaLink="true">http://bthorne93.github.io//classy-wrapper/</guid>
        
        <category>class</category>
        
        <category>cosmology</category>
        
        <category>python</category>
        
        <category>cmb</category>
        
        
        <category>CMB</category>
        
        <category>research</category>
        
      </item>
    
      <item>
        <title>Finding a setup for scientific note taking</title>
        <description>&lt;h2&gt;The problem&lt;/h2&gt; &lt;p&gt;The process of doing research and staying up-to-date with science literature requires a lot of reading. In order to make that reading worthwhile it may be necessary to take some notes summarising content and linking it to other works. The difficulty with this, at least in scientific literature, is the diversity of content that needs to be recorded. This will require software that is able to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Write structured text (headings etc...).&lt;/li&gt; &lt;li&gt;Write equations.&lt;/li&gt; &lt;li&gt;Present figures.&lt;/li&gt; &lt;li&gt;Cross-reference content (equations and figures).&lt;/li&gt; &lt;li&gt;Link URLs.&lt;/li&gt; &lt;li&gt;Contain bibliographic information.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Clearly, all these points are well answered by LaTeX. However, there...</description>
        <pubDate>Tue, 01 Aug 2017 09:06:31 +0900</pubDate>
        <link>http://bthorne93.github.io//note-taking/</link>
        <guid isPermaLink="true">http://bthorne93.github.io//note-taking/</guid>
        
        <category>notes</category>
        
        <category>markdown</category>
        
        <category>latex</category>
        
        <category>software</category>
        
        <category>atom</category>
        
        <category>md</category>
        
        
        <category>Note taking</category>
        
      </item>
    
      <item>
        <title>metropolis hastings</title>
        <description>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;markov_chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Markov chain object&quot;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_file_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_file_path&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span...</description>
        <pubDate>Tue, 27 Jun 2017 09:01:31 +0900</pubDate>
        <link>http://bthorne93.github.io//metropolis-hastings/</link>
        <guid isPermaLink="true">http://bthorne93.github.io//metropolis-hastings/</guid>
        
        <category>cython</category>
        
        
        <category>Bayesian</category>
        
      </item>
    
      <item>
        <title>PyStan - transit model</title>
        <description>&lt;p&gt;PyStan is the Python implementation of the Stan statistical modelling language.  Stan provides a framework for easily setting up probabilistic models and performing Bayesian inference with MCMC sampling.  There is of course a lot of detail behind how the sampler works, but this is going to be a short example of an application of Stan to a simple parameter estimation problem.&lt;/p&gt; &lt;p&gt;I&amp;#39;m going to apply Stan to fit a model of a transit and estimate the parameters involved.  Then I&amp;#39;ll check the fit by making a posterior predictive check, another really convenient feature of Stan.&lt;/p&gt; &lt;p&gt;The only uncommon imports here are...</description>
        <pubDate>Mon, 26 Jun 2017 09:06:31 +0900</pubDate>
        <link>http://bthorne93.github.io//pystan-transit-model/</link>
        <guid isPermaLink="true">http://bthorne93.github.io//pystan-transit-model/</guid>
        
        <category>pystan bayesian</category>
        
        
        <category>Learn PyStan</category>
        
      </item>
    
      <item>
        <title>Making Nice Healpix Plots</title>
        <description>&lt;p&gt;Often work involves maps of the sky provided in HEALPix format. When presenting these in papers or reports the formatting is often terrible so it would be nice to have some guidelines on creating nice-looking maps. We will use the &lt;code&gt;matplotlib&lt;/code&gt; plotting library in Python.&lt;/p&gt; &lt;h1&gt;Projections&lt;/h1&gt; &lt;p&gt;Firstly, since HEALPix is a pixelisation of the sphere it is impossible to have a 2D representation of the data without distortion. There are many different methods for projecting from the sphere to the plane, and several are available in the &lt;code&gt;healpy&lt;/code&gt; module in Python. The available projections are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;orthonormal.&lt;/li&gt; &lt;li&gt;cartesian.&lt;/li&gt; &lt;li&gt;mollweide.&lt;/li&gt; &lt;/ul&gt;...</description>
        <pubDate>Mon, 26 Jun 2017 09:06:31 +0900</pubDate>
        <link>http://bthorne93.github.io//making-nice-plots/</link>
        <guid isPermaLink="true">http://bthorne93.github.io//making-nice-plots/</guid>
        
        <category>healpix</category>
        
        <category>matplotlib</category>
        
        <category>python</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Easy wins with Cython</title>
        <description>&lt;h1&gt;Cython&lt;/h1&gt; &lt;p&gt;Cython is a compiler that allows for extensions to Python written in C. This overcomes two of the biggest drawbacks of Python for data analysis: the global interpreter lock (GIL) and its dynamic typing. &lt;/p&gt; &lt;p&gt;Using Cython one can use static typing to speed up core functions and loops, making huge speed gains even when compared to well vectorised code. Furthermore, by removing the GIL for pure C sections of code one can use multiple cores using OpenMP. &lt;/p&gt; &lt;p&gt;Let&amp;#39;s go through some examples.&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cython&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_ext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cython&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot;...</description>
        <pubDate>Mon, 26 Jun 2017 09:06:31 +0900</pubDate>
        <link>http://bthorne93.github.io//easy-wins-with-cython/</link>
        <guid isPermaLink="true">http://bthorne93.github.io//easy-wins-with-cython/</guid>
        
        <category>cython</category>
        
        
        <category>Learn cython</category>
        
      </item>
    
  </channel>
</rss>
